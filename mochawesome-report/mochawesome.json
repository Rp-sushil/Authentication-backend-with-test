{
  "stats": {
    "suites": 5,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2020-12-05T10:18:14.970Z",
    "end": "2020-12-05T10:18:15.409Z",
    "duration": 439,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a2c51735-da66-4f15-9039-c7fd039b0a31",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "clock = sinon.useFakeTimers({\n   now: 1483228800000\n   });",
          "err": {},
          "uuid": "6499c0a9-9986-4598-ba78-b571ccffb7f7",
          "parentUUID": "a2c51735-da66-4f15-9039-c7fd039b0a31",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 20,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// start the server\napp.listen(port, () => {\n    mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: false });\n    mongoose.connection.once('open', () => {\n        console.log('connected to database');\n        done();\n    }).on('connectionError', (err) =>{\n        console.log(err);\n    })\n})",
          "err": {},
          "uuid": "256442a8-38f5-4006-bdac-a4fbfffd863f",
          "parentUUID": "a2c51735-da66-4f15-9039-c7fd039b0a31",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "clock.restore();",
          "err": {},
          "uuid": "6ede77d1-62f8-40be-9c35-220e9cd64fe4",
          "parentUUID": "a2c51735-da66-4f15-9039-c7fd039b0a31",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 11,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "mongoose.connection.db.dropDatabase(() => {\n    mongoose.disconnect().then(() => done()).catch(err => console.log(err));\n})",
          "err": {},
          "uuid": "9c4681e3-0a32-4988-8ba4-651476d85676",
          "parentUUID": "a2c51735-da66-4f15-9039-c7fd039b0a31",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "35eb0cf8-d889-43d3-baf5-80460f391bc7",
          "title": "POST /api/user/register",
          "fullFile": "C:\\Users\\rpsus\\OneDrive\\Desktop\\mongotutorial\\auth\\__tests__\\app_test.js",
          "file": "\\__tests__\\app_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return validation errors if request is invaild",
              "fullTitle": "POST /api/user/register should return validation errors if request is invaild",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/register')\n    .set({'content-type': 'application/json'})\n    .send({name: 'Mario lucifer', email: 'mariolucifer', password: '123456'})\n    .end((err, res) => {\n        if(err) throw err;\n        res.body.message.should.be.eql('\"email\" must be a valid email')\n        done();\n    })",
              "err": {},
              "uuid": "c26630b9-611a-4a27-91ba-d41af9b66b34",
              "parentUUID": "35eb0cf8-d889-43d3-baf5-80460f391bc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Able to register and return user._id",
              "fullTitle": "POST /api/user/register Able to register and return user._id",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/register')\n    .set({'content-type': 'application/json'})\n    .send({name: 'Mario lucifer', email: 'mariolucifer@gmail.com', password: '123456'})\n    .end((err, res) => {\n        if(err) throw err;\n        registerUserId = res.body.user;\n        expect(res.body.user).not.to.be.undefined;\n        done();\n    })",
              "err": {},
              "uuid": "854aa6eb-0b88-4cda-820f-ee8b6eb78343",
              "parentUUID": "35eb0cf8-d889-43d3-baf5-80460f391bc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not register if email already exist",
              "fullTitle": "POST /api/user/register Should not register if email already exist",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/register')\n    .set({'content-type': 'application/json'})\n    .send({name: 'Dangerous Dave', email: 'mariolucifer@gmail.com', password: '123456'})\n    .end((err, res) => {\n        if(err) throw err;\n        res.body.message.should.be.eql('Email already exists');\n        done();\n    })",
              "err": {},
              "uuid": "1d876b6f-c60b-4719-9ca6-fa5abf94bad5",
              "parentUUID": "35eb0cf8-d889-43d3-baf5-80460f391bc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should store hashed password",
              "fullTitle": "POST /api/user/register should store hashed password",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const user = await User.findOne({_id: registerUserId});\n    if(!user || !user.password) expect(true).to.be.false;\n    const validPass = await bcrypt.compare('123456', user.password);\n    if(!validPass) expect(true).to.be.false;\n    else expect(true).to.be.true;\n} catch (error) {\n    console.log(error.message);\n    expect(true).to.be.false;\n}",
              "err": {},
              "uuid": "6c1c5027-95ac-418f-90e0-a670a0289bfb",
              "parentUUID": "35eb0cf8-d889-43d3-baf5-80460f391bc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c26630b9-611a-4a27-91ba-d41af9b66b34",
            "854aa6eb-0b88-4cda-820f-ee8b6eb78343",
            "1d876b6f-c60b-4719-9ca6-fa5abf94bad5",
            "6c1c5027-95ac-418f-90e0-a670a0289bfb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 191,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "9a60c8ea-68d4-4c9a-9539-eccf308e9980",
          "title": "POST /api/user/login",
          "fullFile": "C:\\Users\\rpsus\\OneDrive\\Desktop\\mongotutorial\\auth\\__tests__\\app_test.js",
          "file": "\\__tests__\\app_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Able to handle invalid data",
              "fullTitle": "POST /api/user/login Able to handle invalid data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/login')\n    .set({'content-type': 'application/json'})\n    .send({email: 'mariolucifer', password: '123456'})\n    .end((err, res) =>{\n        if(err) throw err;\n        res.body.should.be.eql('\"email\" must be a valid email');\n        done();\n    })",
              "err": {},
              "uuid": "4392f87a-5bc9-40bc-9d5d-6b339e8061cd",
              "parentUUID": "9a60c8ea-68d4-4c9a-9539-eccf308e9980",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not login is not registered",
              "fullTitle": "POST /api/user/login Should not login is not registered",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/login')\n    .set({'content-type': 'application/json'})\n    .send({email: 'mariolucifer@hotmail.com', password: '1234564566'})\n    .end((err, res) => {\n        if(err) throw err;\n        res.body.message.should.be.eql('Email not found');\n        done();\n    })",
              "err": {},
              "uuid": "2b3f2199-e2d6-4c7a-b094-29ea4bcd8a67",
              "parentUUID": "9a60c8ea-68d4-4c9a-9539-eccf308e9980",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login if password is incorrect",
              "fullTitle": "POST /api/user/login should not login if password is incorrect",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/login')\n    .set({'content-type': 'application/json'})\n    .send({email: 'mariolucifer@gmail.com', password: '1234564566'})\n    .end((err, res) => {\n        if(err) throw err;\n        res.body.message.should.be.eql('password is wrong');\n        done();\n    })",
              "err": {},
              "uuid": "23c09f7c-bcc7-4a8e-8f3f-1441df8f78c7",
              "parentUUID": "9a60c8ea-68d4-4c9a-9539-eccf308e9980",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should login user and return/set auth/refresh tokens",
              "fullTitle": "POST /api/user/login Should login user and return/set auth/refresh tokens",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .post('/api/user/login')\n    .set({'content-type': 'application/json'})\n    .send({email: 'mariolucifer@gmail.com', password: '123456'})\n    .end((err, res) => {\n        if(err) throw err;\n        AUTH_TOKEN = res.body['auth-token'];\n        REFRESH_TOKEN = res.body['refresh-token'];\n        RefreshTokenId = res.body['refresh-token-id'];\n        expect(RefreshTokenId).not.to.be.undefined;\n        expect(AUTH_TOKEN).not.be.undefined;\n        expect(REFRESH_TOKEN).not.be.undefined;\n        expect(res.header['auth-token']).not.be.undefined;\n        expect(res.header['refresh-token']).not.be.undefined;\n        done();\n    })",
              "err": {},
              "uuid": "a9f89000-89eb-44ec-91ef-40d5ade6a8b5",
              "parentUUID": "9a60c8ea-68d4-4c9a-9539-eccf308e9980",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should refresh-token should be stored in database",
              "fullTitle": "POST /api/user/login Should refresh-token should be stored in database",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const token = await RefreshToken.findOne({_id: RefreshTokenId});\n    expect(token).not.to.be.undefined;\n} catch (error) {\n    console.log(error.message);\n    expect(true).to.be.false;\n}",
              "err": {},
              "uuid": "12927b0e-b09a-4ade-a4e0-ec85261baca1",
              "parentUUID": "9a60c8ea-68d4-4c9a-9539-eccf308e9980",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4392f87a-5bc9-40bc-9d5d-6b339e8061cd",
            "2b3f2199-e2d6-4c7a-b094-29ea4bcd8a67",
            "23c09f7c-bcc7-4a8e-8f3f-1441df8f78c7",
            "a9f89000-89eb-44ec-91ef-40d5ade6a8b5",
            "12927b0e-b09a-4ade-a4e0-ec85261baca1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 149,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "633e71c7-301e-4550-a824-a583ff64d2e3",
          "title": "GET api/user/me",
          "fullFile": "C:\\Users\\rpsus\\OneDrive\\Desktop\\mongotutorial\\auth\\__tests__\\app_test.js",
          "file": "\\__tests__\\app_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Acess denied if user have no token",
              "fullTitle": "GET api/user/me Acess denied if user have no token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get('/api/user/me')\n    .set({'content-type': 'application/json'})\n    .send({})\n    .end((err, res) =>{\n        if(err) throw err;\n        res.body.message.should.be.eql('Access denied');\n        done();\n    })",
              "err": {},
              "uuid": "c2ce72ea-c8cf-45ab-9c05-f77b0ff5d8ad",
              "parentUUID": "633e71c7-301e-4550-a824-a583ff64d2e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Acess denied if not invalid token",
              "fullTitle": "GET api/user/me Acess denied if not invalid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/api/user/me')\n  .set({'content-type': 'application/json', 'auth-token': INVALID_REFRESH_TOKEN})\n  .send({})\n  .end((err, res) =>{\n      if(err) throw err;\n      res.body.message.should.be.eql('jwt malformed');\n      done();\n  })",
              "err": {},
              "uuid": "9ae68e6f-9bb2-485f-bfc4-d42cf292f1e6",
              "parentUUID": "633e71c7-301e-4550-a824-a583ff64d2e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return user if authenticated",
              "fullTitle": "GET api/user/me should return user if authenticated",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clock.tick(30000);\nchai.request(app)\n.get('/api/user/me')\n.set({'content-type': 'application/json', 'auth-token': AUTH_TOKEN})\n.send({})\n.end((err, res) =>{\n    if(err) throw err;\n    expect(res.body._id).not.to.be.undefined;\n    expect(res.body.name).not.to.be.undefined;\n    expect(res.body.email).not.to.be.undefined;\n    expect(res.body.password).not.to.be.undefined;\n    done();\n})",
              "err": {},
              "uuid": "315e8d48-20a2-4437-bb76-ecebc07a9ace",
              "parentUUID": "633e71c7-301e-4550-a824-a583ff64d2e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not login if token expired after 24h",
              "fullTitle": "GET api/user/me should not login if token expired after 24h",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clock.tick(86500000);\nchai.request(app)\n    .get('/api/user/me')\n    .set({'content-type': 'application/json', 'auth-token': AUTH_TOKEN})\n    .send({})\n    .end((err, res) =>{\n        if(err) throw err;\n        res.body.message.should.be.eql('jwt expired');\n        done();\n    })",
              "err": {},
              "uuid": "14db23a5-253e-48e1-a9b4-12eb3506d0bf",
              "parentUUID": "633e71c7-301e-4550-a824-a583ff64d2e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2ce72ea-c8cf-45ab-9c05-f77b0ff5d8ad",
            "9ae68e6f-9bb2-485f-bfc4-d42cf292f1e6",
            "315e8d48-20a2-4437-bb76-ecebc07a9ace",
            "14db23a5-253e-48e1-a9b4-12eb3506d0bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "21816ef1-ba90-4ffa-819c-21e57a5eb4e3",
          "title": "GET /api/user/newAuthToken",
          "fullFile": "C:\\Users\\rpsus\\OneDrive\\Desktop\\mongotutorial\\auth\\__tests__\\app_test.js",
          "file": "\\__tests__\\app_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should set/return new-Auth-token/refresh-token valid for 24h if refresh token valid",
              "fullTitle": "GET /api/user/newAuthToken Should set/return new-Auth-token/refresh-token valid for 24h if refresh token valid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get('/api/user/newAuthToken')\n    .set({'content-type': 'application/json', 'refresh-token': REFRESH_TOKEN})\n    .send({})\n    .end((err, res) => {\n        if(err) throw err;\n        expect(res.header['auth-token']).not.be.undefined;\n        expect(res.header['refresh-token']).not.be.undefined;\n        res.header['refresh-token'].should.be.eql(REFRESH_TOKEN);\n        AUTH_TOKEN = res.header['auth-token'];\n        REFRESH_TOKEN = res.header['refresh-token'];\n        done();\n    })",
              "err": {},
              "uuid": "a13dd7e2-2f02-465b-b4e3-59f654074d43",
              "parentUUID": "21816ef1-ba90-4ffa-819c-21e57a5eb4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new Auth-token should be valid for 24h",
              "fullTitle": "GET /api/user/newAuthToken new Auth-token should be valid for 24h",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clock.tick(300000);\nchai.request(app)\n.get('/api/user/me')\n.set({'content-type': 'application/json', 'auth-token': AUTH_TOKEN})\n.send({})\n.end((err, res) =>{\n    if(err) throw err;\n    expect(res.body._id).not.to.be.undefined;\n    expect(res.body.name).not.to.be.undefined;\n    expect(res.body.email).not.to.be.undefined;\n    expect(res.body.password).not.to.be.undefined;\n    done();\n})",
              "err": {},
              "uuid": "58cd0f53-cc48-4f66-8ec3-d19445a9d4bd",
              "parentUUID": "21816ef1-ba90-4ffa-819c-21e57a5eb4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not generate new-auth-token if refresh token is invalid",
              "fullTitle": "GET /api/user/newAuthToken Should not generate new-auth-token if refresh token is invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get('/api/user/newAuthToken')\n    .set({'content-type': 'application/json', 'refresh-token': INVALID_REFRESH_TOKEN})\n    .send({})\n    .end((err, res) => {\n        if(err) throw err;\n        res.body.message.should.be.eql('jwt malformed');\n        done();\n    })",
              "err": {},
              "uuid": "b19c8585-a75f-4c4f-99c6-abe25b1ee7d8",
              "parentUUID": "21816ef1-ba90-4ffa-819c-21e57a5eb4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not generate new-auth-token if without refresh token",
              "fullTitle": "GET /api/user/newAuthToken should not generate new-auth-token if without refresh token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/api/user/newAuthToken')\n  .set({'content-type': 'application/json'})\n  .send({})\n  .end((err, res) =>{\n      if(err) throw err;\n      res.body.message.should.be.eql('Access denied');\n      done();\n  })",
              "err": {},
              "uuid": "3417ae67-9507-40d8-a002-f7a0e230b277",
              "parentUUID": "21816ef1-ba90-4ffa-819c-21e57a5eb4e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a13dd7e2-2f02-465b-b4e3-59f654074d43",
            "58cd0f53-cc48-4f66-8ec3-d19445a9d4bd",
            "b19c8585-a75f-4c4f-99c6-abe25b1ee7d8",
            "3417ae67-9507-40d8-a002-f7a0e230b277"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        },
        {
          "uuid": "f6754bd9-394b-48bd-aa64-24386ba8112f",
          "title": "DELETE /api/user/logout",
          "fullFile": "C:\\Users\\rpsus\\OneDrive\\Desktop\\mongotutorial\\auth\\__tests__\\app_test.js",
          "file": "\\__tests__\\app_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should not logout if does not have refresh-token",
              "fullTitle": "DELETE /api/user/logout Should not logout if does not have refresh-token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete('/api/user/logout')\n    .set({'content-type': 'application/json'})\n    .send({})\n    .end((err, res) =>{\n        if(err) throw err;\n        res.body.message.should.be.eql('Access denied');\n        done()\n    })",
              "err": {},
              "uuid": "d8f055f6-809c-4692-8222-d370c9feb743",
              "parentUUID": "f6754bd9-394b-48bd-aa64-24386ba8112f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not logout if refresh-token is invalid",
              "fullTitle": "DELETE /api/user/logout should not logout if refresh-token is invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete('/api/user/logout')\n    .set({'content-type': 'application/json', 'refresh-token': INVALID_REFRESH_TOKEN})\n    .send({})\n    .end((err, res) =>{\n        if(err) throw err;\n        res.body.message.should.be.eql('jwt malformed');\n        done()\n    })",
              "err": {},
              "uuid": "26795a07-23d1-4792-969f-4db9d2e73b32",
              "parentUUID": "f6754bd9-394b-48bd-aa64-24386ba8112f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User should logged out and auth/refresh tokens should be undefined in response-header",
              "fullTitle": "DELETE /api/user/logout User should logged out and auth/refresh tokens should be undefined in response-header",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .delete('/api/user/logout')\n    .set({'content-type': 'application/json', 'refresh-token': REFRESH_TOKEN})\n    .send({})\n    .end((err, res) =>{\n        if(err) throw err;\n        expect(res.header['auth-token']).to.be.undefined;\n        expect(res.header['refresh-token']).to.be.undefined;\n        res.body.message.should.be.eql('Successfully logged out');\n        done();\n    })",
              "err": {},
              "uuid": "e9fbf812-d1f9-4111-b420-df5b1f7d403e",
              "parentUUID": "f6754bd9-394b-48bd-aa64-24386ba8112f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "refresh token should be removed from database",
              "fullTitle": "DELETE /api/user/logout refresh token should be removed from database",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const token = await RefreshToken.findOne({_id: RefreshTokenId});\n    expect(token).to.be.null;\n} catch (error) {\n    console.log(error.message);\n    expect(true).to.be.false;\n}",
              "err": {},
              "uuid": "5357e7db-b4e4-4e0d-b660-4b36472665f3",
              "parentUUID": "f6754bd9-394b-48bd-aa64-24386ba8112f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8f055f6-809c-4692-8222-d370c9feb743",
            "26795a07-23d1-4792-969f-4db9d2e73b32",
            "e9fbf812-d1f9-4111-b420-df5b1f7d403e",
            "5357e7db-b4e4-4e0d-b660-4b36472665f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}